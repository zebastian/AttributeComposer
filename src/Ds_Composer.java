//+============================================================================
// $Source: /users/chaize/newsvn/cvsroot/Calculation/AttributeComposer/src/Ds_Composer.java,v $
//
// project :     Tango Device Server
//
// Description:	java source code for the Ds_Composer class and its commands.
//              This class is derived from DeviceImpl class.
//              It represents the CORBA servant obbject which
//              will be accessed from the network. All commands which
//              can be executed on the Ds_Composer are implemented
//              in this file.
//
// $Author: syldup $
//
// $Revision: 1.1.1.1 $
//
// $Log: not supported by cvs2svn $
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


package Ds_Composer;


import java.util.*;
import org.omg.CORBA.*;
import fr.esrf.Tango.*;
import fr.esrf.TangoDs.*;
import fr.esrf.TangoApi.*;


/**
 *	Class Description:
 *	This device composed a spectrum attribute from a list of scalar attribute.
 *
 * @author	$Author: syldup $
 * @version	$Revision: 1.1.1.1 $
 */

//--------- Start of States Description ----------
/*
 *	Device States Description:
 *	DevState.RUNNING :	The device is running and uptate the spectrum result.
 *			And have no Error on one attribute.
 *	DevState.STANDBY :	The device is on standby and is ready to process.
 *			There is no error on one attribute.
 *	DevState.ALARM :	One of the attribute is inreadable.
 *			The device is already processing.
 */
//--------- End of States Description ----------


public class Ds_Composer extends DeviceImpl implements TangoConst
{
	protected	int	state;

	//--------- Start of attributes data members ----------

	protected double[]	attr_spectrumResult_read = new double[10000];

//--------- End of attributes data members ----------


	//--------- Start of properties data members ----------

	/**
	 *	The list of the attribute name, in the order of the spectrum index.
	 */
	String[]	attributeNameList;

//--------- End of properties data members ----------


	//	Add your own data members here
	//--------------------------------------



//=========================================================
/**
 *	Constructor for simulated Time Device Server.
 *
 *	@param	cl	The DeviceClass object
 *	@param	s	The Device name.
 */
//=========================================================
	Ds_Composer(DeviceClass cl, String s) throws DevFailed
	{
		super(cl,s);
		init_device();
	}
//=========================================================
/**
 *	Constructor for simulated Time Device Server.
 *
 *	@param	cl	The DeviceClass object
 *	@param	s	The Device name.
 *	@param	d	Device description.
 */
//=========================================================
	Ds_Composer(DeviceClass cl, String s, String d) throws DevFailed
	{
		super(cl,s,d);
		init_device();
	}


//=========================================================
/**
 *	Initialize the device.
 */
//=========================================================
	public void init_device() throws DevFailed
	{
		System.out.println("Ds_Composer() create " + device_name);

		//	Initialise variables to default values
		//-------------------------------------------
		get_device_property();
		set_state(DevState.ON);
	}

//===================================================================
/**
 *	Read the device properties from database.
 */
//===================================================================			
	public void get_device_property() throws DevFailed
	{
		//	Initialize your default values here.
		//------------------------------------------


		//	Read device properties from database.(Automatic code generation)
		//-------------------------------------------------------------
		if (Util._UseDb==false)
			return;
		String[]	propnames = {
				"AttributeNameList"
			};

		//	Call database and extract values
		//--------------------------------------------
		DbDatum[]	dev_prop = get_db_device().get_property(propnames);
		Ds_ComposerClass	ds_class = (Ds_ComposerClass)get_device_class();
		int	i = -1;
		//	Extract AttributeNameList value
		if (dev_prop[++i].is_empty()==false)		attributeNameList = dev_prop[i].extractStringArray();
		else
		{
			//	Try to get value from class property
			DbDatum	cl_prop = ds_class.get_class_property(dev_prop[i].name);
			if (cl_prop.is_empty()==false)	attributeNameList = cl_prop.extractStringArray();
		}

		//	End of Automatic code generation
		//-------------------------------------------------------------

	}
//=========================================================
/**
 *	Method always executed before command execution.
 */
//=========================================================
	public void always_executed_hook()
	{	
		get_logger().info("In always_executed_hook method()");
	}

//===================================================================
/**
 *	Method called by the read_attributes CORBA operation to
 *	read device hardware
 *
 *	@param	attr_list	Vector of index in the attribute vector
 *		of attribute to be read
 */
//===================================================================			
	public void read_attr_hardware(Vector attr_list)
	{
		get_logger().info("In read_attr_hardware for "+attr_list.size()+" attribute(s)");

		//	Switch on attribute name
		//---------------------------------
	}
//===================================================================
/**
 *	Method called by the read_attributes CORBA operation to
 *	set internal attribute value.
 *
 *	@param	attr	reference to the Attribute object
 */
//===================================================================			
	public void read_attr(Attribute attr) throws DevFailed
	{
		String attr_name = attr.get_name();
		get_logger().info("In read_attr for attribute " + attr_name);

		//	Switch on attribute name
		//---------------------------------
		if (attr_name == "spectrumResult")
		{
			//	Add your own code here
		}
	}



//=========================================================
/**
 *	Execute command "Reset" on device.
 *	This command allows to take in account the new attribute or removed and restart the processing.
 *
 */
//=========================================================
	public void reset() throws DevFailed
	{
		get_logger().info("Entering reset()");

		// ---Add your Own code to control device here ---

		get_logger().info("Exiting reset()");
	}



//=========================================================
/**
 *	Execute command "GetAttributeNameForIndex" on device.
 *	This command return the attributeName corresponding to the index of a spectrum.
 *
 * @param	argin	The index of the spectrum data
 * @return	The attributeName corresponding to the argin index
 */
//=========================================================
	public String get_attribute_name_for_index(short argin) throws DevFailed
	{
		String	argout = new String();

		get_logger().info("Entering get_attribute_name_for_index()");

		// ---Add your Own code to control device here ---

		get_logger().info("Exiting get_attribute_name_for_index()");
		return argout;
	}



//=========================================================
/**
 *	main part for the device server class
 */
//=========================================================
	public static void main(String[] argv)
	{
		try
		{
			Util tg = Util.init(argv,"Ds_Composer");
			tg.server_init();

			System.out.println("Ready to accept request");

			tg.server_run();
		}

		catch (OutOfMemoryError ex)
		{
			System.err.println("Can't allocate memory !!!!");
			System.err.println("Exiting");
		}
		catch (UserException ex)
		{
			Except.print_exception(ex);
			
			System.err.println("Received a CORBA user exception");
			System.err.println("Exiting");
		}
		catch (SystemException ex)
		{
			Except.print_exception(ex);
			
			System.err.println("Received a CORBA system exception");
			System.err.println("Exiting");
		}
		
		System.exit(-1);		
	}
}
	

//--------------------------------------------------------------------------
/* end of $Source: /users/chaize/newsvn/cvsroot/Calculation/AttributeComposer/src/Ds_Composer.java,v $ */
