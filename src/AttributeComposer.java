//+============================================================================
// $Source: /users/chaize/newsvn/cvsroot/Calculation/AttributeComposer/src/AttributeComposer.java,v $
//
// project :     Tango Device Server
//
// Description:	java source code for the Ds_Composer class and its commands.
//              This class is derived from DeviceImpl class.
//              It represents the CORBA servant obbject which
//              will be accessed from the network. All commands which
//              can be executed on the Ds_Composer are implemented
//              in this file.
//
// $Author: katyho $
//
// $Revision: 1.5 $
//
// $Log: not supported by cvs2svn $
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


package AttributeComposer;


import java.util.Arrays;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;

import org.omg.CORBA.SystemException;
import org.omg.CORBA.UserException;

import fr.esrf.Tango.AttrQuality;
import fr.esrf.Tango.AttrWriteType;
import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DevState;
import fr.esrf.Tango.DispLevel;
import fr.esrf.TangoApi.AttributeProxy;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoApi.DeviceAttribute;
import fr.esrf.TangoDs.Attr;
import fr.esrf.TangoDs.Attribute;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.Except;
import fr.esrf.TangoDs.SpectrumAttr;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.UserDefaultAttrProp;
import fr.esrf.TangoDs.Util;


/**
 *	Class Description:
 *	This device composed a spectrum attribute from a list of scalar attribute.
 *
 * @author	$Author: katyho $
 * @version	$Revision: 1.5 $
 */

//--------- Start of States Description ----------
/*
 *	Device States Description:
 *	DevState.RUNNING :	The device is running and uptate the spectrum result.
 *			And have no Error on one attribute.
 *	DevState.STANDBY :	The device is on standby and is ready to process.
 *			There is no error on one attribute.
 *	DevState.ALARM :	One of the attribute is inreadable.
 *			The device is already processing.
 */
//--------- End of States Description ----------


public class AttributeComposer extends DeviceImpl implements TangoConst
{
	protected	int	state;

	//--------- Start of attributes data members ----------

	
	protected double[]	attr_spectrumResult_read = new double[10000];
	protected short[]	attr_booleanSpectrum_read = new short[10000];
	protected String[]	attr_runningAttributesList_read = new String[1000];
	protected String[]	attr_unknownAttributesList_read = new String[1000];
	protected String[]	attr_attributesQualityList_read = new String[1000];
	protected short[]	attr_attributesNumberPriorityList_read = new short[1000];
	protected short		attr_booleanResult= 0;


//--------- End of attributes data members ----------


	//--------- Start of properties data members ----------
	
	private static final String NONE = "NONE";
	private static final String OR = "OR";
	private static final String AND = "AND";
	private static final String XOR = "XOR";
	
	/**
	 *	The list of the attribute name, in the order of the spectrum index.
	 */
	String[]	attributeNameList;
	
	/**
	 *	The priority number of a quality (the greater is the most important ex: 3 for ALARM)
	 *	Call GetTangoQualities to know the list of the Tango Quality order.
	 */
	short[]	priorityList;
	
	/**
	 *	The list of the attribute name, in the order of the spectrum index.
	 */
	String	logicalBoolean = AttributeComposer.NONE;

	//--------- End of properties data members ----------


	//	Add your own data members here
	//--------------------------------------
	private Hashtable m_qualityTable =  new Hashtable();
	private Hashtable m_priorityTable =  new Hashtable();
	private Hashtable m_runningAttributeTable =  new Hashtable();
	private Hashtable m_unknowAttributeTable =  new Hashtable();
	private Hashtable m_resumQualityTable =  new Hashtable();
	private Hashtable m_resumpriorityTable = new Hashtable();
	private Hashtable m_stateQualityTable =  new Hashtable();
	private Hashtable m_booleanLogical =  new Hashtable();
	private String[]  stringQualityList;
	private static final String[] logicalChoices = new String[]{NONE,OR,AND,XOR};
	private boolean isReading = false;
	

//=========================================================
/**
 *	Constructor for simulated Time Device Server.
 *
 *	@param	cl	The DeviceClass object
 *	@param	s	The Device name.
 */
//=========================================================
	AttributeComposer(DeviceClass cl, String s) throws DevFailed
	{
		super(cl,s);
		init_device();
	}
//=========================================================
/**
 *	Constructor for simulated Time Device Server.
 *
 *	@param	cl	The DeviceClass object
 *	@param	s	The Device name.
 *	@param	d	Device description.
 */
//=========================================================
	AttributeComposer(DeviceClass cl, String s, String d) throws DevFailed
	{
		super(cl,s,d);
		init_device();
	}


//=========================================================
/**
 *	Initialize the device.
 */
//=========================================================
	public void init_device() throws DevFailed
	{
		System.out.println("AttributeComposer() create " + device_name);
		
		//	Initialise variables to default values
		//-------------------------------------------
		clearAll();
		set_state(DevState.STANDBY);
		m_qualityTable.put(AttrQuality.ATTR_VALID,"VALID");
		m_qualityTable.put(AttrQuality.ATTR_CHANGING,"CHANGING");
		m_qualityTable.put(AttrQuality.ATTR_WARNING,"WARNING");
		m_qualityTable.put(AttrQuality.ATTR_ALARM,"ALARM");
		m_qualityTable.put(AttrQuality.ATTR_INVALID,"INVALID");
		
		Enumeration enum = m_qualityTable.keys();
		Object[] ObjectList = m_qualityTable.values().toArray();
		stringQualityList = new String[m_qualityTable.size()];
		for (int i = 0; i < ObjectList.length; i++)
		    stringQualityList[i]=(String)ObjectList[i];
        
		priorityList = new short[m_qualityTable.size()];
		m_priorityTable.put(AttrQuality.ATTR_VALID, new Integer(2));
		m_priorityTable.put(AttrQuality.ATTR_CHANGING, new Integer(0));
		m_priorityTable.put(AttrQuality.ATTR_WARNING, new Integer(3));
		m_priorityTable.put(AttrQuality.ATTR_ALARM, new Integer(3));
		m_priorityTable.put(AttrQuality.ATTR_INVALID, new Integer(4));
		
		//get the default behaviour
		for (int i = 0; i < stringQualityList.length; i++)
		{
		    AttrQuality attrQualitytmp = getQualityForName(stringQualityList[i]);
		    priorityList[i]=((Integer)m_priorityTable.get(attrQualitytmp)).shortValue();
		}
		get_device_property();
		
		//restore the user behaviour
		for (int i = 0; i < stringQualityList.length; i++)
		{
		    AttrQuality attrQualitytmp = getQualityForName(stringQualityList[i]);
		    m_priorityTable.put(attrQualitytmp,new Integer(priorityList[i]));
		}
		
		 enum = m_qualityTable.keys();
	     while(enum.hasMoreElements())
	     {
	         AttrQuality key = (AttrQuality)enum.nextElement();
	         Integer value =(Integer)m_priorityTable.get(key);
	         m_resumpriorityTable.put(value,key);
	     }
	    
	     m_stateQualityTable.put(AttrQuality.ATTR_CHANGING,DevState.MOVING);
	     m_stateQualityTable.put(AttrQuality.ATTR_ALARM,DevState.ALARM);
	     m_stateQualityTable.put(AttrQuality.ATTR_WARNING,DevState.ALARM);
	     m_stateQualityTable.put(AttrQuality.ATTR_INVALID,DevState.UNKNOWN);
	     m_stateQualityTable.put(AttrQuality.ATTR_VALID,DevState.ON);
		
		//Initalisation des devices proxy
		if(attributeNameList.length > 0)
		{
		    
		    (new Thread()
		    		{
		    				 public void run()
		    				 {
		    				     	isReading = true;
		    				     	AttributeProxy proxy = null; 
			    attr_attributesQualityList_read = new String[attributeNameList.length];
				attr_attributesNumberPriorityList_read = new short[attributeNameList.length];
				for (int i = 0; i < attributeNameList.length; i++)
			    {
			        try
			        {
			            proxy = new AttributeProxy(attributeNameList[i].trim());
			            m_runningAttributeTable.put(attributeNameList[i].trim().toLowerCase(),proxy);
			            DeviceAttribute attr_tmp = (DeviceAttribute)proxy.read();
			            AttrQuality quality_tmp = attr_tmp.getQuality();
			            attr_attributesNumberPriorityList_read[i]=((Integer)m_priorityTable.get(quality_tmp)).shortValue();
			            attr_attributesQualityList_read[i] = (String)m_qualityTable.get(quality_tmp) + "-" + attributeNameList[i].trim().toLowerCase();
			            if(!m_resumQualityTable.containsKey(quality_tmp) &&  !m_resumQualityTable.contains((Integer)m_priorityTable.get(quality_tmp)))
			                m_resumQualityTable.put(quality_tmp,(Integer)m_priorityTable.get(quality_tmp));
			        }
			        catch (DevFailed e)
	                {
			            m_unknowAttributeTable.put(attributeNameList[i].trim().toLowerCase(),"NULL");
			            attr_attributesNumberPriorityList_read[i]=((Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID)).shortValue();
			            attr_attributesQualityList_read[i] = "INVALID-" + attributeNameList[i].trim().toLowerCase();
			            if(!m_resumQualityTable.containsKey(AttrQuality.ATTR_INVALID) &&  !m_resumQualityTable.contains((Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID)))
			                m_resumQualityTable.put(AttrQuality.ATTR_INVALID,(Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID));
	                }		       
	            }
			    
			    attr_runningAttributesList_read = new String[m_runningAttributeTable.size()];
			    attr_unknownAttributesList_read = new String[m_unknowAttributeTable.size()];
			    Enumeration enum = m_unknowAttributeTable.keys();
			    int index = 0;
			    while(enum.hasMoreElements())
			    {
			        attr_unknownAttributesList_read[index] = (String)enum.nextElement();
			        index++;
			    }
			   
			    enum = m_runningAttributeTable.keys();
			    index = 0;
			    while(enum.hasMoreElements())
			    {
			        attr_runningAttributesList_read[index] = (String)enum.nextElement();
			        index++;
			    }
			    isReading = false;
		    }
		    }).start();
		    
			    if(!logicalBoolean.equals(NONE))
			    {
			        //Create a boolean of spectrum			    
			        SpectrumAttr attributeSpc = new SpectrumAttr("booleanSpectrum",Tango_DEV_SHORT,10000);
			        UserDefaultAttrProp	props = new UserDefaultAttrProp();
			        props.set_label("booleanSpectrum");
			        props.set_description("Spectrum of boolean value");
			        attributeSpc.set_default_properties(props);
			        add_attribute(attributeSpc);
			        
			        //Create a boolean scalar attribute	
			        Attr attribute = new Attr("booleanResult",Tango_DEV_SHORT, AttrWriteType.READ);
			        
			        UserDefaultAttrProp	props2 = new UserDefaultAttrProp();
			        props2.set_label("booleanResult");
			        props2.set_description("Application of the logical operator " + logicalBoolean + "on booleanSpectrum attribute");
			        props2.set_format("%1d");
			        props2.set_min_value("-1");
			        props2.set_max_value("2");
			        attribute.set_default_properties(props2);
			        add_attribute(attribute);
			        
			        ActivateAllClass activateClass = new ActivateAllClass("ActivateAll",Tango_DEV_VOID,Tango_DEV_VOID,"","Activate All attributes",DispLevel.OPERATOR);
	                get_device_class().get_command_list().add(activateClass);
	                
	                DeactivateAllClass deactivateClass = new DeactivateAllClass("DeactivateAll",Tango_DEV_VOID,Tango_DEV_VOID,"","Deactivate All attributes",DispLevel.OPERATOR);
	                get_device_class().get_command_list().add(deactivateClass);
	                
			    set_state(DevState.RUNNING);
			    set_status("Device is processing...");
			}
		}
		else
		{
		    set_state(DevState.STANDBY);
		    set_status("No device defined");
		}		
	}
	
	public void clearAll()
	{
	    m_qualityTable.clear();
		m_priorityTable.clear();
		m_runningAttributeTable.clear();
		m_unknowAttributeTable.clear();
		m_resumQualityTable.clear();
		m_resumpriorityTable.clear();
		m_stateQualityTable.clear();
	}
	
	public AttrQuality getQualityForName(String qualitytmp)
	{
	    try
	    {
	        qualitytmp = "ATTR_" + qualitytmp.trim().toUpperCase();
	        AttrQuality attrQualitytmp = (AttrQuality)AttrQuality.class.getField(qualitytmp).get(this);
		    return attrQualitytmp;
		}
	    catch (Exception e)
	    {
	        return AttrQuality.ATTR_INVALID;
	    }
	}

//===================================================================
/**
 *	Read the device properties from database.
 */
//===================================================================			
	public void get_device_property() throws DevFailed
	{
		//	Initialize your default values here.
		//------------------------------------------


		//	Read device properties from database.(Automatic code generation)
		//-------------------------------------------------------------
		if (Util._UseDb==false)
			return;
		String[]	propnames = {
				"AttributeNameList",
				"PriorityList",
				"LogicalBoolean"
			};

		//	Call database and extract values
		//--------------------------------------------
		DbDatum[]	dev_prop = get_db_device().get_property(propnames);
		int	i = -1;
		//	Extract AttributeNameList value
		if (!dev_prop[++i].is_empty())
		    attributeNameList = dev_prop[i].extractStringArray();
		else
		{
			DbDatum	dev_prop1 = get_db_device().get_property("AttributeNameList");
		    dev_prop1.insert(new String[0]);
			get_db_device().put_property(new DbDatum[]{dev_prop1});
			attributeNameList = new String[0];
		}
		
//		Extract PriorityList value
		if (!dev_prop[++i].is_empty())
		{
		    short[] priorityListtmp = dev_prop[i].extractShortArray();
		    if(priorityListtmp.length == priorityList.length)
		        priorityList = priorityListtmp;		    
		}
		else
		{
		    DbDatum	dev_prop1 = get_db_device().get_property("PriorityList");
		    dev_prop1.insert(priorityList);
			get_db_device().put_property(new DbDatum[]{dev_prop1});
		}
		
//		Extract PriorityList value
		if (!dev_prop[++i].is_empty())
		    logicalBoolean  = dev_prop[i].extractString();
		else
		{
		    DbDatum	dev_prop1 = get_db_device().get_property("LogicalBoolean");
		    dev_prop1.insert(logicalBoolean);
			get_db_device().put_property(new DbDatum[]{dev_prop1});
		}
		
		//	End of Automatic code generation
		//-------------------------------------------------------------

	}
	
//	=========================================================
	/**
	 *	Execute command "GetPriorityForState" on device.
	 *	This command return the priority associated to a given State.
	 *
	 * @param	argin	The State name (ex:ON, OFF, FAULT)
	 * @return	The priority of the state
	 */
//	=========================================================
	public short get_priority_for_quality(String argin) throws DevFailed
	{
		short	argout =  (short)0;

		get_logger().info("Entering get_priority_for_state()");

		// ---Add your Own code to control device here ---
		AttrQuality attrQualitytmp = getQualityForName(argin);
		argout = ((Integer)m_priorityTable.get(attrQualitytmp)).shortValue();
		get_logger().info("Exiting get_priority_for_state()");
		return argout;
	}
	
//	=========================================================
	/**
	 *	Execute command "GetTangoStates" on device.
	 *	This command return the list of the TANGO states and their associated values.
	 *	Ex : ON,  OFF
	 *
	 * @return	The list of the state with the associated number
	 */
//	=========================================================
	public String[] get_tango_qualities() throws DevFailed
	{
		get_logger().info("Entering get_tango_states()");

		// ---Add your Own code to control device here ---
		get_logger().info("Exiting get_tango_states()");
		return stringQualityList;
	}

//	=========================================================
	/**
	 *	Execute command "GetLogicalBoolean" on device.
	 *	This command return the list of the  logical Boolean choices for LogicalBoolean property.
	 *	Ex : AND,  OR
	 *
	 * @return	The list of the choices
	 */
//	=========================================================
	public String[] get_logical_boolean() throws DevFailed
	{
		get_logger().info("Entering get_tango_states()");

		// ---Add your Own code to control device here ---
		get_logger().info("Exiting get_tango_states()");
		return logicalChoices;
	}
//=========================================================
/**
 *	Method always executed before command execution.
 */
//=========================================================
	public void always_executed_hook()
	{	
		get_logger().info("In always_executed_hook method()");
		//Initalisation des devices proxy
		if(!isReading)
		{
		    isReading = true;
		    (new Thread()
			{
				public void run()
				{
				    m_resumQualityTable.clear();
					m_resumpriorityTable.clear();
					if(attributeNameList.length > 0)
					{
					    for (int i = 0; i < attributeNameList.length; i++)
					    {
					        try
					        {
					            AttributeProxy proxy;
					            if(m_runningAttributeTable.containsKey(attributeNameList[i].trim().toLowerCase()))
					            {
					                proxy = (AttributeProxy)m_runningAttributeTable.get(attributeNameList[i].trim().toLowerCase());
					                DeviceAttribute attr=proxy.read();
					                AttrQuality attrQualityTmp = attr.getQuality();
					                attr_attributesNumberPriorityList_read[i]=((Integer)m_priorityTable.get(attrQualityTmp)).shortValue();
						            attr_attributesQualityList_read[i] = (String)m_qualityTable.get(attrQualityTmp) + "-" + attributeNameList[i].trim().toLowerCase();
						            if(!m_resumQualityTable.containsKey(attrQualityTmp) &&  !m_resumQualityTable.contains((Integer)m_priorityTable.get(attrQualityTmp)))
						                m_resumQualityTable.put(attrQualityTmp,(Integer)m_priorityTable.get(attrQualityTmp));
					            }
					        }
					        catch (DevFailed e)
			                {
					            attr_attributesNumberPriorityList_read[i]=((Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID)).shortValue();
					            attr_attributesQualityList_read[i] = "INVALID-" + attributeNameList[i].trim().toLowerCase();
					            if(!m_resumQualityTable.containsKey(AttrQuality.ATTR_INVALID) &&  !m_resumQualityTable.contains((Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID)))
					                m_resumQualityTable.put(AttrQuality.ATTR_INVALID,(Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID));
			                }      
					   }
					   
					   try
					   {
						   if(!m_unknowAttributeTable.isEmpty())
						   {
						       if(!m_resumQualityTable.containsKey(AttrQuality.ATTR_INVALID) &&  !m_resumQualityTable.contains((Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID)))
					                m_resumQualityTable.put(AttrQuality.ATTR_INVALID,(Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID));
						   }
						       
						   if(m_resumQualityTable.size() == 0)
						   {
						       set_state(DevState.UNKNOWN);
							   set_status("Not initialized yet");
						   }
						   else if(m_resumQualityTable.size() == 1)
						   {
						       AttrQuality attrQuality_tmp = (AttrQuality)m_resumQualityTable.keys().nextElement();
						       set_state((DevState)m_stateQualityTable.get(attrQuality_tmp));
							   set_status("All the attributes are in " + (String)m_qualityTable.get(attrQuality_tmp) + " quality.");
						   }
						   else
						   {
						       Enumeration enum = m_resumQualityTable.keys();
						       while(enum.hasMoreElements())
						       {
						           AttrQuality key =(AttrQuality)enum.nextElement();
						           Integer value =(Integer)m_resumQualityTable.get(key);
						           m_resumpriorityTable.put(value,key);
						       }
						      
						       Object[] objList = m_resumQualityTable.values().toArray();
						       Arrays.sort(objList);
						       AttrQuality attrQuality_tmp =(AttrQuality) m_resumpriorityTable.get(objList[objList.length - 1]);
						       DevState state_tmp = (DevState)m_stateQualityTable.get(attrQuality_tmp);
						       
						       set_state(state_tmp);
						       set_status("One of the attribute is in " + (String)m_qualityTable.get(attrQuality_tmp) + " quality.");
						   } 
					   }
					   catch (Exception e) {}
					}
					isReading = false;
				}
			}).start();
		}
	}

//===================================================================
/**
 *	Method called by the read_attributes CORBA operation to
 *	read device hardware
 *
 *	@param	attr_list	Vector of index in the attribute vector
 *		of attribute to be read
 */
//===================================================================			
	public void read_attr_hardware(Vector attr_list)
	{
		get_logger().info("In read_attr_hardware for "+attr_list.size()+" attribute(s)");

		//	Switch on attribute name
		//---------------------------------
		attr_spectrumResult_read = new double[ attributeNameList.length];
		attr_booleanSpectrum_read = new short[ attributeNameList.length];
		for(int i = 0 ; i < attributeNameList.length ; i++)
	    {
		    if(m_runningAttributeTable.containsKey(attributeNameList[i].trim().toLowerCase()))
		    {
		        try
		        {
		            AttributeProxy proxy = (AttributeProxy)m_runningAttributeTable.get(attributeNameList[i].trim().toLowerCase());
		            DeviceAttribute attr = proxy.read();
		            //System.out.println("DATA TYPE = " + attr.getType());
		            double value = 0;
		            switch (attr.getType()) {
		            case TangoConst.Tango_DEV_SHORT:
                        value = new Short(attr.extractShort()).doubleValue();
                        break;
		            case TangoConst.Tango_DEVVAR_SHORTARRAY:
		                short[] array = attr.extractShortArray();
		            	value = 0 ;
		            	for (int j = 0; j < array.length; j++)
		                    value = value + array[i]  ;                        
                        break;
		            case TangoConst.Tango_DEV_BOOLEAN:
		                if(attr.extractBoolean())
		                    value = 1;
		                else
		                    value = 0;
                        break; 
		            case TangoConst.Tango_DEV_USHORT:
                        value = new Integer(attr.extractUShort()).doubleValue();
                        break;
		            case TangoConst.Tango_DEVVAR_USHORTARRAY:
		                int[] array1 = attr.extractUShortArray();
		            	value = 0 ;
		            	for (int j = 0; j < array1.length; j++)
		                    value = value + array1[i]  ;                        
                        break;
		            case TangoConst.Tango_DEV_ULONG:
                        value = new Integer(attr.extractLong()).doubleValue();
                        break;
		            case TangoConst.Tango_DEVVAR_ULONGARRAY:
		                int[] array2 = attr.extractLongArray();
		            	value = 0 ;
		            	for (int j = 0; j < array2.length; j++)
		                    value = value + array2[i]  ;                        
                        break;
                    case TangoConst.Tango_DEV_LONG:
                        value = new Integer(attr.extractLong()).doubleValue();
                        break;
                    case TangoConst.Tango_DEVVAR_LONGARRAY:
		                int[] array3 = attr.extractLongArray();
		            	value = 0 ;
		            	for (int j = 0; j < array3.length; j++)
		                    value = value + array3[i]  ;                        
                        break;
                    case TangoConst.Tango_DEV_UCHAR:
                        value = new Short(attr.extractUChar()).doubleValue();
                        break;
                    case TangoConst.Tango_DEV_STATE:
                        value = new Integer(attr.extractState().value()).doubleValue();
                        break;
                    case TangoConst.Tango_DEV_DOUBLE:
                        value = attr.extractDouble();
                        break;
                    case TangoConst.Tango_DEVVAR_DOUBLEARRAY:
		                double[] array4 = attr.extractDoubleArray();
		            	value = 0 ;
		            	for (int j = 0; j < array4.length; j++)
		                    value = value + array4[i]  ;                        
                        break;
                    default:
                        value = Double.NaN; 
                        break;
                    }
		            attr_spectrumResult_read[i] = value;
		            short svalue = 1;
		            if(value == Double.NaN || value != 1)
		                svalue = 0;
		            attr_booleanSpectrum_read[i]=svalue;
		        }
		        catch (Exception e)
		        {
		            //e.printStackTrace();
		            attr_spectrumResult_read[i]= Double.NaN;
		            attr_booleanSpectrum_read[i]=0;
		        }
		    }
		    else
		    {
                attr_spectrumResult_read[i]= Double.NaN;
		    	attr_booleanSpectrum_read[i]=0;
		    }
        }
		
		//	Add your own code here
	    m_booleanLogical.clear();
	    for (int i = 0; i < attr_booleanSpectrum_read.length; i++)
	    {
	        Boolean boolVal = new Boolean(false);
	        if(attr_booleanSpectrum_read[i]==1)
	            boolVal = new Boolean(true);
	        m_booleanLogical.put(boolVal,boolVal);
	        if(m_booleanLogical.size() == 2)
	            return;
	    }
	}
//===================================================================
/**
 *	Method called by the read_attributes CORBA operation to
 *	set internal attribute value.
 *
 *	@param	attr	reference to the Attribute object
 */
//===================================================================			
	public void read_attr(Attribute attr) throws DevFailed
	{
		String attr_name = attr.get_name();
		get_logger().info("In read_attr for attribute " + attr_name);

		//	Switch on attribute name
		//---------------------------------
		if (attr_name == "spectrumResult")
		{
		   attr.set_quality(AttrQuality.ATTR_INVALID) ;
		   attr.set_value(attr_spectrumResult_read,attr_spectrumResult_read.length);
	    }
		if (attr_name == "runningAttributesList")
		{
			//	Add your own code here
		    attr.set_value(attr_runningAttributesList_read,attr_runningAttributesList_read.length);
		}
		else
		if (attr_name == "unknownAttributesList")
		{
			//	Add your own code here
		    attr.set_value(attr_unknownAttributesList_read,attr_unknownAttributesList_read.length);
		}
		else
		if (attr_name == "attributesQualityList")
		{
			//	Add your own code here
		    attr.set_value(attr_attributesQualityList_read,attr_attributesQualityList_read.length);
		}
		else
		if (attr_name == "attributesNumberPriorityList")
		{
			//	Add your own code here
		    attr.set_value(attr_attributesNumberPriorityList_read,attr_attributesNumberPriorityList_read.length);
		}
		else
		if (attr_name == "booleanSpectrum")
		{
			//	Add your own code here
		    attr.set_value(attr_booleanSpectrum_read,attr_booleanSpectrum_read.length);
		}
		else
		if (attr_name == "booleanResult")
		{
			//	Add your own code here
		    boolean result = false;
		    if(m_booleanLogical.size() == 1)
		    {
		        if(logicalBoolean.equalsIgnoreCase(XOR))
		            result = true;
		        else
		            result = ((Boolean)m_booleanLogical.keys().nextElement()).booleanValue();
		    }
		    
		    if(m_booleanLogical.size() == 2)
		    {
		        if(logicalBoolean.equalsIgnoreCase(XOR))
		            result = false;
		        else if(logicalBoolean.equalsIgnoreCase(OR))
		            result = true;
		        else
		            result = false;
		    }
		    if(result)
		        attr_booleanResult=1;
		    else
		        attr_booleanResult=0;
		    
		    attr.set_value(attr_booleanResult);
		}
		
	}



//=========================================================
/**
 *	Execute command "Reset" on device.
 *	This command allows to take in account the new attribute or removed and restart the processing.
 *
 */
//=========================================================
	public void reset() throws DevFailed
	{
		get_logger().info("Entering reset()");

		// ---Add your Own code to control device here ---
		init_device();
		get_logger().info("Exiting reset()");
	}
	
//	=========================================================
	/**
	 *	Execute command "SetAllValues" on device.
	 *
	 */
//	=========================================================
	public void set_all_values(double argin) throws DevFailed
	{
		get_logger().info("Entering reset()");

		// ---Add your Own code to control device here ---
		Enumeration enum = m_runningAttributeTable.elements();
		while(enum.hasMoreElements())
	    {
	        
            AttributeProxy proxy = (AttributeProxy)enum.nextElement();
            DeviceAttribute attr = proxy.read();
            double value = argin;
            switch (attr.getType())
            {
            case TangoConst.Tango_DEV_SHORT:
                attr.insert(new Double(value).shortValue());
                break;
            case TangoConst.Tango_DEV_BOOLEAN:
                boolean boolVal = false;
                if(value == 1)
                    boolVal = true;
                attr.insert(boolVal);
            	break; 
            case TangoConst.Tango_DEV_USHORT:
                attr.insert(new Double(value).intValue());
                break;
            case TangoConst.Tango_DEV_ULONG:
                attr.insert(new Double(value).intValue());
                break;
            case TangoConst.Tango_DEV_LONG:
                attr.insert(new Double(value).intValue());
                break;
            case TangoConst.Tango_DEV_UCHAR:
                attr.insert(new Double(value).shortValue());
                break;
            case TangoConst.Tango_DEV_DOUBLE:
                attr.insert(value);
                break;
     
            default:
                value = Double.NaN; 
                break;
            }
            if(value != Double.NaN)
                proxy.write(attr);
	    }
		get_logger().info("Exiting reset()");
	}

//	=========================================================
	/**
	 *	Execute command "Reset" on device.
	 *	This command allows to take in account the new attribute or removed and restart the processing.
	 *
	 */
//	=========================================================
	public void activate_all() throws DevFailed
	{
		get_logger().info("Entering reset()");

		// ---Add your Own code to control device here ---
		set_all_values(1);
		
		get_logger().info("Exiting reset()");
	}

//	=========================================================
	/**
	 *	Execute command "Reset" on device.
	 *	This command allows to take in account the new attribute or removed and restart the processing.
	 *
	 */
//	=========================================================
	public void deactivage_all() throws DevFailed
	{
		get_logger().info("Entering reset()");

		// ---Add your Own code to control device here ---
		set_all_values(0);
		
		get_logger().info("Exiting reset()");
	}


//=========================================================
/**
 *	Execute command "GetAttributeNameForIndex" on device.
 *	This command return the attributeName corresponding to the index of a spectrum.
 *
 * @param	argin	The index of the spectrum data
 * @return	The attributeName corresponding to the argin index
 */
//=========================================================
	public String get_attribute_name_for_index(short argin) throws DevFailed
	{
	    String	argout = new String();
		get_logger().info("Entering get_attribute_name_for_index()");

		// ---Add your Own code to control device here ---
		if(attributeNameList.length == 0)
		    argout = "attribute list is empty";
		
		if(argin > attributeNameList.length - 1)
		    argout = "index out of the bound attribute list";
		
		if(attributeNameList.length != 0 && argin < attributeNameList.length)
		    argout = attributeNameList[argin];
			
		get_logger().info("Exiting get_attribute_name_for_index()");
		return argout;
	}



//=========================================================
/**
 *	main part for the device server class
 */
//=========================================================
	public static void main(String[] argv)
	{
		try
		{
			Util tg = Util.init(argv,"AttributeComposer");
			tg.server_init();

			System.out.println("Ready to accept request");

			tg.server_run();
		}

		catch (OutOfMemoryError ex)
		{
			System.err.println("Can't allocate memory !!!!");
			System.err.println("Exiting");
		}
		catch (UserException ex)
		{
			Except.print_exception(ex);
			
			System.err.println("Received a CORBA user exception");
			System.err.println("Exiting");
		}
		catch (SystemException ex)
		{
			Except.print_exception(ex);
			
			System.err.println("Received a CORBA system exception");
			System.err.println("Exiting");
		}
		
		System.exit(-1);		
	}
}
	

//--------------------------------------------------------------------------
/* end of $Source: /users/chaize/newsvn/cvsroot/Calculation/AttributeComposer/src/AttributeComposer.java,v $ */
