//+============================================================================
// $Source: /users/chaize/newsvn/cvsroot/Calculation/AttributeComposer/src/AttributeComposer.java,v $
//
// project :     Tango Device Server
//
// Description: java source code for the AttributeComposer class and its commands.
//              This class is derived from DeviceImpl class.
//              It represents the CORBA servant obbject which
//              will be accessed from the network. All commands which
//              can be executed on the StateComposer are implemented
//              in this file.
//
// $Author: ounsy $
//
// $Revision: 1.14.2.1 $
//
// $Log: not supported by cvs2svn $
// Revision 1.14  2006/12/21 11:45:44  katyho
// Clear all the tables
//
// Revision 1.7  2006/05/02 09:56:14  katyho
// Remove all the command in the clear Method
//
// Revision 1.2  2006/03/09 11:17:26  katyho
// Modify the GetTangoState command
//
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-============================================================================
//
//          This file is generated by POGO
//  (Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//============================================================================

package AttributeComposer;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.Vector;

import org.omg.CORBA.SystemException;
import org.omg.CORBA.UserException;

import fr.esrf.Tango.AttrQuality;
import fr.esrf.Tango.DevError;
import fr.esrf.Tango.DevFailed;
import fr.esrf.Tango.DevState;
import fr.esrf.TangoApi.AttributeInfo;
import fr.esrf.TangoApi.Database;
import fr.esrf.TangoApi.DbDatum;
import fr.esrf.TangoApi.DeviceAttribute;
import fr.esrf.TangoApi.DeviceProxy;
import fr.esrf.TangoApi.Group.Group;
import fr.esrf.TangoApi.Group.GroupAttrReply;
import fr.esrf.TangoApi.Group.GroupAttrReplyList;
import fr.esrf.TangoApi.Group.GroupReply;
import fr.esrf.TangoApi.Group.GroupReplyList;
import fr.esrf.TangoDs.Attribute;
import fr.esrf.TangoDs.DeviceClass;
import fr.esrf.TangoDs.DeviceImpl;
import fr.esrf.TangoDs.Except;
import fr.esrf.TangoDs.TangoConst;
import fr.esrf.TangoDs.Util;
import fr.soleil.device.utils.QualityUtilities;
import fr.soleil.device.utils.StateUtilities;

public class AttributeComposer extends DeviceImpl  implements TangoConst
{

    protected int state;
    
    //--------- Start of attributes data members ----------
    protected double attr_spectrumResult_read[] = new double[10000];
    protected short attr_booleanSpectrum_read[] = new short[10000];
    protected String attr_attributesQualityList_read[] = new String[1000];
    protected short attr_attributesNumberPriorityList_read[] = new short[1000];
    protected String attr_attributesResultReport_read[] = new String[10000];
    protected boolean attr_booleanResult = false;
    //  --------- End of attributes data members ----------
 
    
    //--------- Start of properties data members ----------
    /**
     * The list of attribute name used to composed the resum state and the spectrum result.
     */
    String attributeNameList[];
    /**
    * The priority number of a quality (the greater is the most important is ex: 5
    * for ALARM) Call GetTangoQuality to know the list of the Tango Quality order.
    */
    String priorityList[];
    /**
     * The logical gates to apply on the list of attribute.
     */
    String logicalBoolean;
    
    //--------- End of properties data members ----------
    
    //  Add your own data members here
    //--------------------------------------
    /*
     * The supported logical gates
     */
    private static final String NONE = "NONE";
    private static final String OR = "OR";
    private static final String AND = "AND";
    private static final String XOR = "XOR";
    private static final String logicalChoices[] = {NONE, OR, AND, XOR};
    
    /*
     * The table of priority <AttrQuality, Priority>
     */
    private Hashtable<AttrQuality, Integer> m_priorityTable = new Hashtable<AttrQuality, Integer>();   
    /*
     * The table of the quality and their associated device State 
     */
    private Hashtable<AttrQuality, DevState> m_qualityStateTable = new Hashtable<AttrQuality, DevState>();
    /*
     * The table of the attribute name and their associated qualities <attributeName, AttrQuality>
     */
    private Hashtable<String, AttrQuality> m_attributeQualityTable = new Hashtable<String, AttrQuality>();
    /*
     * The table of the attribute name and their associated proxy group <attributeName, Group> 
     */
    private Hashtable<String, Group> m_attributeGroupTable = new Hashtable<String, Group>();
    /*
     * The table of the attribute name and their associated read values <attributeName, values>
     */
    private Hashtable<String, Double> m_attributeValueTable = new Hashtable<String, Double>();
    /*
     * The table of the attribute name and their associated message result <attributeName, message report>
     * the messages are generated during the connexion, read or write instruction
     */
    private Hashtable<String, String> m_attributeResultReportTable = new Hashtable<String, String>();
    
    private Vector<Boolean> m_booleanLogicalVector = new Vector<Boolean>();
    
    /*
     * The value to send on all the attributes
     */
    private double m_sentValue = Double.NaN;
    /*
     * The property value to send on all the attributes
     */
    private String m_sentProperty = "";
    /*
     * When the device is well initialized = true for the quality
     */
    private boolean m_initializedQuality = false;
    /*
     * When the device is well initialized = true for the value
     */
    private boolean m_initializedValue = false;
    /*
     * The thread that Read the Quality of all attributes
     */
    private Thread m_QualityReader = null;
    /*
     * The thread that Read the values of all attributes
     */
    private Thread m_ValueReader = null;
    /*
     * The thread that Update the State of the device
     */
    private Thread m_StateUpdater = null;
    /*
     * The thread that Update the values of the spectrumResult
     */
    private Thread m_ValueUpdater = null;
    /**
     *  SimpleDateFormat to timeStamp the error messages
     */
    public static final SimpleDateFormat m_insertformat  = new SimpleDateFormat ("dd-MM-yyyy HH:mm:ss");
    

//=========================================================
/**
 * Constructor for simulated Time Device Server.
 * 
 * @param cl
 *            The DeviceClass object
 * @param s
 *            The Device name.
 */
//=========================================================
 AttributeComposer(DeviceClass cl, String s) throws DevFailed
 {
     super(cl, s);
     //Build the m_qualityState table
     m_qualityStateTable.put(AttrQuality.ATTR_CHANGING, DevState.MOVING);
     m_qualityStateTable.put(AttrQuality.ATTR_ALARM, DevState.ALARM);
     m_qualityStateTable.put(AttrQuality.ATTR_WARNING, DevState.ALARM);
     m_qualityStateTable.put(AttrQuality.ATTR_INVALID, DevState.FAULT);
     m_qualityStateTable.put(AttrQuality.ATTR_VALID, DevState.ON);
     
     //Initialize a default priority table if the PriorityList properties is not defined
     // Greater the priority number is, greater the priority is important
     m_priorityTable.put(AttrQuality.ATTR_VALID, new Integer(2));
     m_priorityTable.put(AttrQuality.ATTR_CHANGING, new Integer(0));
     m_priorityTable.put(AttrQuality.ATTR_WARNING, new Integer(3));
     m_priorityTable.put(AttrQuality.ATTR_ALARM, new Integer(3));
     m_priorityTable.put(AttrQuality.ATTR_INVALID, new Integer(4));
     
     //build the associated PriorityList property
     //Syntax "Quality name","PriorityNumber"
     priorityList = new String[m_priorityTable.size()];
     Enumeration enumeration  = m_priorityTable.keys();
     int tmpIndex = 0;
     while (enumeration.hasMoreElements())
     {
         AttrQuality key = (AttrQuality) enumeration.nextElement();
         priorityList[tmpIndex]= QualityUtilities.getNameForQuality(key) + "," + m_priorityTable.get(key);
         tmpIndex++;
     }
     init_device();
 }
 
 //=========================================================
 /**
  * Constructor for simulated Time Device Server.
  * 
  * @param cl
  *            The DeviceClass object
  * @param s
  *            The Device name.
  * @param d
  *            Device description.
  */
 //=========================================================
 AttributeComposer(DeviceClass cl, String s, String d) throws DevFailed
 {
     super(cl, s, d);
     init_device();
 }
 
 //=========================================================
 /**
  * Initialize the device.
  */
 //=========================================================
 public void init_device() throws DevFailed
 {
     System.out.println("AttributeComposer() create " + device_name);
     //Clear all the commands and empty the tables
     clearAll();
     set_state(DevState.STANDBY);
     // Start the initalisation in a Thread in order to avoid the timeout problem
     (new Thread()
     {
         public void run() {
             try
             {
                 get_device_property();
                 
                 //get the custom priority
                 getCustomPriorityList();
                
                 //Creation of device proxy group
                 groupCreation();
             }
             catch(Exception exception)
             {
                 m_initializedQuality = false;
                 set_state(DevState.FAULT);
                 set_status("Device is not initialzed properly :\n" + exception.getMessage());
             }
         }//End run
     }).start();
 }

 /*
  * Clear all 
  */
 public void clearAll()
 {
     m_attributeValueTable.clear();
     m_attributeQualityTable.clear();
     m_attributeGroupTable.clear();
     m_attributeResultReportTable.clear();
     m_QualityReader = null;
     m_ValueReader = null;
     m_StateUpdater = null;
     m_ValueUpdater = null;     
     m_sentValue = Double.NaN;
     m_sentProperty = "";
     m_initializedQuality = false;
     m_initializedValue = false;
 }
 
 /**
  * Get the custom priority list
  */
 private void getCustomPriorityList()
 {
     //Set the non defined state in the property at 0 priority
     //Enumeration of existing state
     Enumeration keys = QualityUtilities.getQualityTable().keys();
     Integer tmpPriority = new Integer(0);
     while (keys.hasMoreElements()) 
     {
         AttrQuality key = (AttrQuality) keys.nextElement();
         m_priorityTable.put(key, tmpPriority);            
     }
     
     //Get the custom priority
     for (int i = 0; i < priorityList.length; i++)
     {
         //System.out.println("priorityList["+ i + "]=" + priorityList[i]);
         //Syntax "Quality","PriorityNumber"
         //So count the token separated by ","
         StringTokenizer token = new StringTokenizer(priorityList[i].trim(), ",");
         if (token.countTokens() == 2)
         {
             //To avoid the the pb of case
             String tmpQualityName = token.nextToken().trim().toUpperCase();
             //If the custom state exist
             if (QualityUtilities.isQualityExist(tmpQualityName))
             {
                 //The default proprity
                 try
                 {
                     tmpPriority = Integer.valueOf(token.nextToken().trim());
                 }
                 catch (NumberFormatException e){}
                 
                 //System.out.println("Quality=" + tmpQualityName);
                 //System.out.println("Priority=" + tmpPriority);
                 m_priorityTable.put(QualityUtilities.getQualityForName(tmpQualityName), tmpPriority);
             }
         }
     }
 }
 
 /**
  * Creation of the group of devices
 */
 private void groupCreation() throws Exception
 {
     //If no property defined the devices is in STANDBY
     if (attributeNameList == null || attributeNameList.length == 0 || attributeNameList[0].trim().equals(""))
     {
         m_initializedQuality = false;
         set_state(DevState.STANDBY);
         set_status("No attribute defined");
         attr_spectrumResult_read = new double[0];
         attr_booleanSpectrum_read = new short[0];
         attr_attributesQualityList_read = new String[0];
         attr_attributesNumberPriorityList_read = new short[0];
         return;
     }
     
     //Initialize all the attributes
     attr_spectrumResult_read = new double[attributeNameList.length];
     attr_booleanSpectrum_read = new short[attributeNameList.length];
     attr_attributesQualityList_read = new String[attributeNameList.length];
     attr_attributesNumberPriorityList_read = new short[attributeNameList.length];
     for(int i = 0; i < attr_spectrumResult_read.length; i++)
     {
         attr_spectrumResult_read[i] = Double.NaN;
         attr_booleanSpectrum_read[i] = 0;
         attr_attributesQualityList_read[i] = QualityUtilities.getNameForQuality(AttrQuality.ATTR_INVALID) + "-" + attributeNameList[i];
         attr_attributesNumberPriorityList_read[i] = ((Integer)m_priorityTable.get(AttrQuality.ATTR_INVALID)).shortValue();
     }
     
     //First remove the double entry of proxy thanks to a Vector
     for(int i = 0; i < attributeNameList.length; i++)
     {
         String tmpFullAttributeName = attributeNameList[i].trim();
         String tmpAttributeName = "";
         String tmpDeviceName = "";
         //attribute name = //TANGO:HOST/FAMILY/DOMAIN/MEMBER/ATTRIBUTENAME
         //So extract the last index of /
         int pos = tmpFullAttributeName.lastIndexOf("/");
         if(pos != -1)
         {
             tmpDeviceName = tmpFullAttributeName.substring(0, pos);
             tmpAttributeName = tmpFullAttributeName.substring(pos + 1, tmpFullAttributeName.length());
         }
         else
         {
             m_initializedQuality = false;
             set_state(DevState.FAULT);
             set_status("See the attributesResultReport attribute and make an Init Command");
             m_attributeResultReportTable.put(tmpFullAttributeName,m_insertformat.format(new Date()) + " : is not an attribute please update the AttributeNameList property");
             return;
         }
         try
         {
             // If the group does not exists yet
             if(!m_attributeGroupTable.containsKey(tmpAttributeName))
             {
                 Group newGroup = new Group(tmpAttributeName);
                 newGroup.add(tmpDeviceName);
                 m_attributeGroupTable.put(tmpAttributeName, newGroup);
             }
             else
             {
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 tmpGroup.add(tmpDeviceName);
             }
         }
         catch (Exception e)
         {
             m_initializedQuality = false;
             set_state(DevState.FAULT);
             set_status("See the attributesResultReport attribute and make an Init Command");
             m_attributeResultReportTable.put(tmpFullAttributeName,m_insertformat.format(new Date()) + " : Connexion error relaunch it and make an Init Command");
         }
     }
     
     //Arrived here the device is initiazed correctly 
     m_initializedQuality = true;
     m_initializedValue = true;
 }
 
 /*
  * Return the index of a given attribute 
  */
 private int get_index_for_attribute(String aAttributeName)
 {
     int tmpIndex = -1;
     
     if(aAttributeName.trim().equals(""))
         return tmpIndex;
     
     for(int i = 0; i < attributeNameList.length; i++)
         if(attributeNameList[i].trim().equalsIgnoreCase(aAttributeName))
             return i;

     return tmpIndex;
 }
 
 /*
  * Return the result of the logical gates on a given vecto 
  */
 private boolean apply_logical_gate(Vector<Boolean> aBooleanVector)
 {
     if(logicalBoolean.equals(NONE))
         return false;
     
     boolean result = false;
     if(aBooleanVector.size() == 1)
     {
         if(logicalBoolean.equalsIgnoreCase(XOR))
             result = true;
         else
             result = ((Boolean)m_booleanLogicalVector.elements().nextElement()).booleanValue();
     }
     if(aBooleanVector.size() == 2)
     {
         if(logicalBoolean.equalsIgnoreCase(XOR))
             result = false;
         else if(logicalBoolean.equalsIgnoreCase(OR))
             result = true;
         else
             result = false;
     }
     return result;
 }

 //===================================================================
 /**
  * Read the device properties from database.
  */
 //===================================================================
 public void get_device_property() throws DevFailed
 {
     if(!Util._UseDb)
         return;
     String propnames[] = 
     {
         "AttributeNameList",
         "PriorityList",
         "LogicalBoolean"
     };
     
     DbDatum dev_prop[] = get_db_device().get_property(propnames);
     int i = -1;
     
     // Extract AttributeNameList value
     if(!dev_prop[++i].is_empty())
         attributeNameList = dev_prop[i].extractStringArray();
     else
     {
         DbDatum dev_prop1 = get_db_device().get_property("AttributeNameList");
         attributeNameList = new String[] {""};
         dev_prop1.insert(attributeNameList);
         get_db_device().put_property(new DbDatum[] { dev_prop1 });
     }
     
     //Extract PriorityList value
     if(!dev_prop[++i].is_empty())
         priorityList = dev_prop[i].extractStringArray();
     else
     {
         DbDatum dev_prop1 = get_db_device().get_property("PriorityList");
         dev_prop1.insert(priorityList);
         get_db_device().put_property(new DbDatum[] {dev_prop1});
     } 
     
     //Extract LogicalBoolean value
     if(!dev_prop[++i].is_empty())
     {
         logicalBoolean = dev_prop[i].extractString();
         if(logicalBoolean.trim().equals(""))
         {
             logicalBoolean = NONE;
             DbDatum dev_prop1 = get_db_device().get_property("LogicalBoolean");
             dev_prop1.insert(logicalBoolean);
             get_db_device().put_property(new DbDatum[] {dev_prop1});
         }
     }
     else
     {
         DbDatum dev_prop1 = get_db_device().get_property("LogicalBoolean");
         logicalBoolean = NONE;
         dev_prop1.insert(logicalBoolean);
         get_db_device().put_property(new DbDatum[] {dev_prop1});
     }
 }

//=========================================================
 /**
  * Method always executed before command execution.
  */
 //=========================================================
 public void always_executed_hook()
 {
     get_logger().info("In always_executed_hook method()");
     try
     {
         if(m_initializedValue && (m_QualityReader == null || !m_QualityReader.isAlive()))
         {
             m_QualityReader = new QualityReader();
             m_QualityReader.start();
         }
         
         if(m_StateUpdater == null || !m_StateUpdater.isAlive())
         {
             m_StateUpdater = new StateUpdater();
             m_StateUpdater.start();
         }
     }
     catch (Exception e)
     {
         m_initializedQuality = false;
         set_state(DevState.FAULT);
         set_status(m_insertformat.format(new Date()) + " : Fatal Error Execute and Init Command \n" + e.getMessage());
     }
  }
 
 //===================================================================
 /**
  * Method called by the read_attributes CORBA operation to read device
  * hardware
  * 
  * @param attr_list
  *            Vector of index in the attribute vector of attribute to be
  *            read
  */
 //===================================================================
 public void read_attr_hardware(Vector attr_list)
 {
     get_logger().info("In read_attr_hardware for " + attr_list.size() + " attribute(s)");
     try
     {
         if(m_initializedQuality && (m_ValueReader == null || !m_ValueReader.isAlive()))
         {
             m_ValueReader = new ValueReader();
             m_ValueReader.start();
         }
         
         if(m_ValueUpdater == null || !m_ValueUpdater.isAlive())
         {
             m_ValueUpdater = new ValueUpdater();
             m_ValueUpdater.start();
         }
     }
     catch (Exception e)
     {
         m_initializedQuality = false;
         set_state(DevState.FAULT);
         set_status(m_insertformat.format(new Date()) + " : Fatal Error Execute and Init Command \n" + e.getMessage());
     }
 }

 //===================================================================
 /**
  * Method called by the read_attributes CORBA operation to set internal
  * attribute value.
  * 
  * @param attr reference to the Attribute object
  */
 //===================================================================
 public void read_attr(Attribute attr)throws DevFailed
 {
     String attr_name = attr.get_name();
     get_logger().info("In read_attr for attribute " + attr_name);
     
     //attr_spectrumResult_read update in ValueUpdater Thread
     if(attr_name == "spectrumResult")
         attr.set_value(attr_spectrumResult_read, attr_spectrumResult_read.length);
     
     //attr_attributesQualityList_read update in QualityReader Thread
     else if(attr_name == "attributesQualityList")
         attr.set_value(attr_attributesQualityList_read, attr_attributesQualityList_read.length);
     
     //attr_attributesNumberPriorityList_read update in QualityReader Thread
     else if(attr_name == "attributesNumberPriorityList")
         attr.set_value(attr_attributesNumberPriorityList_read, attr_attributesNumberPriorityList_read.length);
     
     //attr_booleanSpectrum_read update in QualityReader Thread
     else if(attr_name == "booleanSpectrum")
         attr.set_value(attr_booleanSpectrum_read, attr_booleanSpectrum_read.length);
     
     //m_booleanLogicalVector update in ValueUpdater Thread
     else if(attr_name == "booleanResult")
     {
         //m_booleanLogicalVector is update in the ValueUpdater thread
         //System.out.println("m_booleanLogicalVector.size()=" + m_booleanLogicalVector.size());
         boolean result = apply_logical_gate(m_booleanLogicalVector);
         attr.set_value(result);
     }
     
     else if (attr_name.equals("State"))
     {
         if(!m_initializedQuality)
         {
             attr.set_value(StateUtilities.getNameForState(DevState.FAULT));
             return;
         }
         attr.set_value(StateUtilities.getNameForState(get_state()));
     }
     
     else if (attr_name.equals("Status"))
     {
        attr.set_value(get_status());
     }
     
     //attr_attributesResultReport_read
     else if (attr_name == "attributesResultReport")
     {
         // Add your own code here
         //System.out.println("Read attributesResult m_attributeResultReportTable.size()" + m_attributeResultReportTable.size());
         attr_attributesResultReport_read = new String[m_attributeResultReportTable.size()];
         Enumeration enumeration = m_attributeResultReportTable.keys();
         int tmpIndex = 0;
         while(enumeration.hasMoreElements())
         {
             String key = (String)enumeration.nextElement();
             attr_attributesResultReport_read[tmpIndex]= key + "->" +(String)m_attributeResultReportTable.get(key);
             tmpIndex++;
         }
         attr.set_value(attr_attributesResultReport_read, attr_attributesResultReport_read.length);
     }
 }
 
 //=========================================================
 /**
  * Execute command "GetPriorityForQuality" on device.
  * This command return the priority for a given quality
  */
 //=========================================================
 public short get_priority_for_quality(String argin)throws DevFailed
 {
     short argout = 0;
     get_logger().info("Entering get_priority_for_state()");
     AttrQuality attrQualitytmp = QualityUtilities.getQualityForName(argin);
     argout = ((Integer)m_priorityTable.get(attrQualitytmp)).shortValue();
     get_logger().info("Exiting get_priority_for_state()");
     return argout;
 }

 //=========================================================
 /**
  * Execute command "GetTangoQualities" on device.
  * This command return the list of possibles qualities
  */
 //=========================================================
 public String[] get_tango_qualities()throws DevFailed
 {
     get_logger().info("Entering get_tango_states()");
     get_logger().info("Exiting get_tango_states()");
     return QualityUtilities.QUALITYIST;
 }
 
 //=========================================================
 /**
  * Execute command "GetAttributeNameForIndex" on device.
  * This command return the attribute of an associated index
  */
 //=========================================================
 public String get_attribute_name_for_index(short argin)throws DevFailed
 {
     get_logger().info("Entering get_attribute_name_for_index()");
     String argout = "Unknown Index";
     if(attributeNameList != null && argin > -1 && argin < attributeNameList.length)
         argout = attributeNameList[argin];
     get_logger().info("Exiting get_attribute_name_for_index()");
     return argout;
 }
 
//=========================================================
 /**
  * Execute command "GetLogicalChoices" on device.
  * This command return the list of possibles logical gates
  */
 //=========================================================
 public String[] get_logical_boolean()throws DevFailed
 {
     get_logger().info("Entering get_tango_states()");
     get_logger().info("Exiting get_tango_states()");
     return logicalChoices;
 }
 
//=========================================================
 /**
  * Execute command "SetAllValues" on device.
  * This command write the given value on all the attributes
  */
 //=========================================================
 public void set_all_values(double argin)throws DevFailed
 {
     get_logger().info("Entering set_all_values()");
     m_sentValue = argin;
     //Do nothing if the device is in error
     if(!m_initializedQuality)
         return;
     
     //Execute in a Thread to avoid the time out problem
     (new Thread()
     {
         public void run()
         {
             Enumeration enumeration = m_attributeGroupTable.keys();
             String tmpAttributeName ="";
             try
             {
                 DeviceAttribute tmpDeviceAttribute = null;
                 while(enumeration.hasMoreElements())
                 {
                     tmpAttributeName = (String)enumeration.nextElement();
                     Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                     GroupAttrReplyList tmpResultGroup = tmpGroup.read_attribute(tmpAttributeName, true);
                     //Get the first result only
                     if(!tmpResultGroup.isEmpty())
                     {
                         try
                         {
                             GroupAttrReply tmpOneResult = (GroupAttrReply)tmpResultGroup.elements().nextElement();
                             if(tmpOneResult.has_failed())
                             {
                                 //Do not the write instruction
                                 //Send an exception
                                 DevError tmpError = new DevError();
                                 tmpError.desc = "Write error";
                                 tmpError.origin = tmpAttributeName;
                                 tmpError.reason = "Cannot read the value";
                                 throw (new DevFailed("Write error",new DevError[]{tmpError})); 
                             }
                             else
                             {
                                 tmpDeviceAttribute = tmpOneResult.get_data();
                                 //Insert value value
                                 switch(tmpDeviceAttribute.getType())
                                 {
                                     case Tango_DEV_SHORT : 
                                         tmpDeviceAttribute.insert((new Double(m_sentValue)).shortValue());
                                         break;

                                     case Tango_DEV_USHORT: 
                                         tmpDeviceAttribute.insert_us((new Double(m_sentValue)).shortValue());
                                         break;
                                     
                                     case Tango_DEV_CHAR:
                                         tmpDeviceAttribute.insert((new Double(m_sentValue)).intValue());
                                         break;
        
                                     case Tango_DEV_UCHAR: 
                                         tmpDeviceAttribute.insert_uc((new Double(m_sentValue)).shortValue());
                                         break;
                                         
                                     case Tango_DEV_LONG: 
                                         tmpDeviceAttribute.insert((new Double(m_sentValue)).intValue());
                                         break;
        
                                     case Tango_DEV_ULONG:
                                         tmpDeviceAttribute.insert((new Double(m_sentValue)).intValue());
                                         break;
                                    
                                     case Tango_DEV_FLOAT: 
                                         tmpDeviceAttribute.insert((new Double(m_sentValue)).floatValue());
                                         break;
        
                                     case Tango_DEV_DOUBLE:
                                         tmpDeviceAttribute.insert(m_sentValue);
                                         break;
                                         
                                     case Tango_DEV_BOOLEAN: 
                                         boolean tmpBooleanValue = false;
                                         if(m_sentValue == 1)
                                             tmpBooleanValue = true;
                                         tmpDeviceAttribute.insert(tmpBooleanValue);
                                         break;
        
                                     default:
                                         m_sentValue = Double.NaN;
                                         break;
                                 }//End switch
                                 
                                 //Write value 
                                 if(m_sentValue != Double.NaN)
                                 {
                                     String tmpDeviceName = "";
                                     try
                                     {
                                         GroupReplyList tmpGroupResult = tmpGroup.write_attribute(tmpDeviceAttribute, true);
                                         //System.out.println("tmpGroupResult" + tmpGroupResult.size());
                                         Enumeration enumeration2 = tmpGroupResult.elements();
                                         while (enumeration2.hasMoreElements())
                                         {
                                             GroupReply tmpGroupReply = (GroupReply)enumeration2.nextElement();
                                             tmpDeviceName = tmpGroupReply.dev_name();
                                             if(tmpGroupReply.has_failed())
                                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Write " + String.valueOf(m_sentValue) + " : FAILED");
                                             else
                                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Write " + String.valueOf(m_sentValue) + " : SUCCESS");
                                         }
                                         
                                     }
                                     catch(Exception exception)
                                     {
                                         m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected write Error, can t write " + String.valueOf(m_sentValue) + " value :" + exception.getMessage());
                                     }
                                 }//End if write
                             }
                         }
                         catch(Exception exception)
                         {
                             m_initializedQuality = false;
                             set_state(DevState.FAULT);
                             set_status(m_insertformat.format(new Date()) + " : Error see attributesResultReport and make an Init Command");
                             m_attributeResultReportTable.clear();
                             m_attributeResultReportTable.put(tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected write Error, can t write " + String.valueOf(m_sentValue) + " value :" + exception.getMessage());
                         }
                     }//End if
                 }//End while enumeration
             }//End try
             catch (Exception exception)
             {
                 m_initializedQuality = false;
                 set_state(DevState.FAULT);
                 set_status(m_insertformat.format(new Date()) + " : Error see attributesResultReport and make an Init Command");
                 m_attributeResultReportTable.clear();
                 m_attributeResultReportTable.put(tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected write Error, can t write " + String.valueOf(m_sentValue) + " value :" + exception.getMessage());
             }
         }//End run
     }).start();
     get_logger().info("Exiting set_all_values()");
 }

//=========================================================
 /**
  * Execute command "SetAllFormat" on device.
  * This command set the format property eg : %6.3f on all the attributes
  */
 //=========================================================
 public void set_all_format(String argin) throws DevFailed
 {
     get_logger().info("Entering set_all_format()");
     m_sentProperty = argin;
     //Execute in a Thread to avoid the time out problem
     (new Thread()
     {
         public void run()
         {
             for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
             {
                 String tmpAttributeName = (String)enumeration.nextElement();
                 String tmpDeviceName = "";
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 try
                 {
                     //Get Each proxy
                     for(int i = 0; i < tmpGroup.get_size(true); i++)
                     {
                         try
                         {
                             //!! Beware index begin at 1 for group
                             DeviceProxy tmpDevicePoxy = tmpGroup.get_device(i+1);
                             //System.out.println("tmpDevicePoxy="+tmpDevicePoxy);
                             if(tmpDevicePoxy != null)
                             {
                                 tmpDeviceName = tmpDevicePoxy.get_name();
                                 AttributeInfo tmpAttributeInfo = tmpDevicePoxy.get_attribute_info(tmpAttributeName);
    	                         tmpAttributeInfo.format = m_sentProperty;
    	                         tmpDevicePoxy.set_attribute_info(new AttributeInfo[] {tmpAttributeInfo});
    	                         tmpAttributeInfo = null;
    	                         tmpDevicePoxy = null;
                                 
                                 //Arrived here the command is SUCCESS
                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Format property to " + String.valueOf(m_sentProperty) + " : SUCCESS");
                             }
                         }
                         catch(Exception exception)
                         {
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Unit property to " + String.valueOf(m_sentProperty) + " : FAILED");
                         }
                     }
                 }
                 catch(Exception exception)
                 {
                     m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected Error Set Format property to " + String.valueOf(m_sentProperty) + " : " + exception.getMessage());
                 }
             }
         }
     }).start();
     get_logger().info("Exiting set_all_format()");
 }

//=========================================================
 /**
  * Execute command "SetAllUnit" on device.
  * This command set the Unit property eg : Volt on all the attributes
  */
 //=========================================================
 public void set_all_unit(String argin) throws DevFailed
 {
     get_logger().info("Entering set_all_unit()");
     m_sentProperty = argin;
     //Execute in a Thread to avoid the time out problem
     (new Thread()
     {
         public void run()
         {
             for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
             {
                 String tmpAttributeName = (String)enumeration.nextElement();
                 String tmpDeviceName = "";
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 try
                 {
                     //Get Each proxy
                     for(int i = 0; i < tmpGroup.get_size(true); i++)
                     {
                         try
                         {
                             //!! Beware index begin at 1 for group
                             DeviceProxy tmpDevicePoxy = tmpGroup.get_device(i+1);
                             if(tmpDevicePoxy != null)
                             {
                                 tmpDeviceName = tmpDevicePoxy.get_name();
                                 AttributeInfo tmpAttributeInfo = tmpDevicePoxy.get_attribute_info(tmpAttributeName);
                                 tmpAttributeInfo.unit = m_sentProperty;
                                 tmpDevicePoxy.set_attribute_info(new AttributeInfo[] {tmpAttributeInfo});
                                 tmpAttributeInfo = null;
                                 tmpDevicePoxy = null;
                                 
                                 //Arrived here the command is SUCCESS
                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Unit property to " + String.valueOf(m_sentProperty) + " : SUCCESS");
                             }
                         }
                         catch(Exception exception)
                         {
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Unit property to " + String.valueOf(m_sentProperty) + " : FAILED");
                         }
                     }
                 }
                 catch(Exception exception)
                 {
                     m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected Error Set Unit property to " + String.valueOf(m_sentProperty) + " : " + exception.getMessage());
                 }
             }
         }
     }).start();
     get_logger().info("Exiting set_all_unit()");
 }

//=========================================================
 /**
  * Execute command "SetAllMinValue" on device.
  * This command set the minimum value property on all the attributes
  */
 //=========================================================
 public void set_all_min_value(double argin) throws DevFailed
 {
     get_logger().info("Entering set_all_min_value()");
     m_sentProperty = String.valueOf(argin);
     //Execute in a Thread to avoid the time out problem
     (new Thread()
     {
         public void run()
         {
             for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
             {
                 String tmpAttributeName = (String)enumeration.nextElement();
                 String tmpDeviceName = "";
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 try
                 {
                     //Get Each proxy
                     for(int i = 0; i < tmpGroup.get_size(true); i++)
                     {
                         try
                         {
                             //!! Beware index begin at 1 for group
                             DeviceProxy tmpDevicePoxy = tmpGroup.get_device(i+1);
                             if(tmpDevicePoxy != null)
                             {
                                 tmpDeviceName = tmpDevicePoxy.get_name();
                                 AttributeInfo tmpAttributeInfo = tmpDevicePoxy.get_attribute_info(tmpAttributeName);
                                 tmpAttributeInfo.min_value = m_sentProperty;
                                 tmpDevicePoxy.set_attribute_info(new AttributeInfo[] {tmpAttributeInfo});
                                 tmpAttributeInfo = null;
                                 tmpDevicePoxy = null;
                                 
                                 //Arrived here the command is SUCCESS
                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Minimum Value property to " + String.valueOf(m_sentProperty) + " : SUCCESS");
                             }
                         }
                         catch(Exception exception)
                         {
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Minimum Value property to " + String.valueOf(m_sentProperty) + " : FAILED");
                         }
                     }
                 }
                 catch(Exception exception)
                 {
                     m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected Error Set Unit property to " + String.valueOf(m_sentProperty) + " : " + exception.getMessage());
                 }
             }
         }
     }).start();
     get_logger().info("Exiting set_all_min_value()");
 }

//=========================================================
 /**
  * Execute command "SetAllMaxValue" on device.
  * This command set the maximum value property on all the attributes
  */
 //=========================================================
 public void set_all_max_value(double argin)throws DevFailed
 {
     get_logger().info("Entering set_all_max_value()");
     m_sentProperty = String.valueOf(argin);
     //Execute in a Thread to avoid the time out problem
     (new Thread()
     {
         public void run()
         {
             for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
             {
                 String tmpAttributeName = (String)enumeration.nextElement();
                 String tmpDeviceName = "";
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 try
                 {
                     //Get Each proxy
                     for(int i = 0; i < tmpGroup.get_size(true); i++)
                     {
                         try
                         {
                             //!! Beware index begin at 1 for group
                             DeviceProxy tmpDevicePoxy = tmpGroup.get_device(i+1);
                             if(tmpDevicePoxy != null)
                             {
                                 tmpDeviceName = tmpDevicePoxy.get_name();
                                 AttributeInfo tmpAttributeInfo = tmpDevicePoxy.get_attribute_info(tmpAttributeName);
                                 tmpAttributeInfo.max_value = m_sentProperty;
                                 tmpDevicePoxy.set_attribute_info(new AttributeInfo[] {tmpAttributeInfo});
                                 tmpAttributeInfo = null;
                                 tmpDevicePoxy = null;
                                 
                                 //Arrived here the command is SUCCESS
                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Maximum Value property to " + String.valueOf(m_sentProperty) + " : SUCCESS");
                             }
                         }
                         catch(Exception exception)
                         {
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Maximum Value property to " + String.valueOf(m_sentProperty) + " : FAILED");
                         }
                     }
                 }
                 catch(Exception exception)
                 {
                     m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected Error Set Maximum Value property to " + String.valueOf(m_sentProperty) + " : " + exception.getMessage());
                 }
             }
         }
     }).start();
     get_logger().info("Exiting set_all_max_value()");
 }

//=========================================================
 /**
  * Execute command "SetAllMinAlarm" on device.
  * This command set the minimum alarm value property on all the attributes
  */
 //=========================================================
 public void set_all_min_alarm(double argin) throws DevFailed
 {
     get_logger().info("Entering set_all_min_alarm()");
     m_sentProperty = String.valueOf(argin);
     //Execute in a Thread to avoid the time out problem
     (new Thread()
     {
         public void run()
         {
             for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
             {
                 String tmpAttributeName = (String)enumeration.nextElement();
                 String tmpDeviceName = "";
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 try
                 {
                     //Get Each proxy
                     for(int i = 0; i < tmpGroup.get_size(true); i++)
                     {
                         try
                         {
                             //!! Beware index begin at 1 for group
                             DeviceProxy tmpDevicePoxy = tmpGroup.get_device(i+1);
                             if(tmpDevicePoxy != null)
                             {
                                 tmpDeviceName = tmpDevicePoxy.get_name();
                                 AttributeInfo tmpAttributeInfo = tmpDevicePoxy.get_attribute_info(tmpAttributeName);
                                 tmpAttributeInfo.min_alarm = m_sentProperty;
                                 tmpDevicePoxy.set_attribute_info(new AttributeInfo[] {tmpAttributeInfo});
                                 tmpAttributeInfo = null;
                                 tmpDevicePoxy = null;
                                 
                                 //Arrived here the command is SUCCESS
                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Minimum Alarm Value property to " + String.valueOf(m_sentProperty) + " : SUCCESS");
                             }
                         }
                         catch(Exception exception)
                         {
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Minimum Alarm Value property to " + String.valueOf(m_sentProperty) + " : FAILED");
                         }
                     }
                 }
                 catch(Exception exception)
                 {
                     m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected Error Set Minimum Alarm Value property to " + String.valueOf(m_sentProperty) + " : " + exception.getMessage());
                 }
             }
         }
     }).start();
     get_logger().info("Exiting set_all_min_alarm()");
 }

//=========================================================
 /**
  * Execute command "SetAllMaxAlarm" on device.
  * This command set the maximum alarm value property on all the attributes
  */
 //=========================================================
 public void set_all_max_alarm(double argin)throws DevFailed
 {
     get_logger().info("Entering set_all_max_alarm()");
     m_sentProperty = String.valueOf(argin);
     //Execute in a Thread to avoid the time out problem
     (new Thread()
     {
         public void run()
         {
             for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
             {
                 String tmpAttributeName = (String)enumeration.nextElement();
                 String tmpDeviceName = "";
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 try
                 {
                     //Get Each proxy
                     for(int i = 0; i < tmpGroup.get_size(true); i++)
                     {
                         try
                         {
                             //!! Beware index begin at 1 for group
                             DeviceProxy tmpDevicePoxy = tmpGroup.get_device(i+1);
                             if(tmpDevicePoxy != null)
                             {
                                 tmpDeviceName = tmpDevicePoxy.get_name();
                                 AttributeInfo tmpAttributeInfo = tmpDevicePoxy.get_attribute_info(tmpAttributeName);
                                 tmpAttributeInfo.max_alarm = m_sentProperty;
                                 tmpDevicePoxy.set_attribute_info(new AttributeInfo[] {tmpAttributeInfo});
                                 tmpAttributeInfo = null;
                                 tmpDevicePoxy = null;
                                 
                                 //Arrived here the command is SUCCESS
                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Maximum Alarm Value property to " + String.valueOf(m_sentProperty) + " : SUCCESS");
                             }
                         }
                         catch(Exception exception)
                         {
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Maximum Alarm Value property to " + String.valueOf(m_sentProperty) + " : FAILED");
                         }
                     }
                 }
                 catch(Exception exception)
                 {
                     m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected Error Set Maximum Alarm Value property to " + String.valueOf(m_sentProperty) + " : " + exception.getMessage());
                 }
             }
         }
     }).start();
     get_logger().info("Exiting set_all_max_alarm()");
 }

//=========================================================
 /**
  * Execute command "SetAllLabel" on device.
  * This command set the Label property on all the attributes
  */
 //=========================================================
 public void set_all_label(String argin)throws DevFailed
 {
     get_logger().info("Entering set_all_label()");
     m_sentProperty = argin;
     //Execute in a Thread to avoid the time out problem
     (new Thread()
     {
         public void run()
         {
             for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
             {
                 String tmpAttributeName = (String)enumeration.nextElement();
                 String tmpDeviceName = "";
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 try
                 {
                     //Get Each proxy
                     for(int i = 0; i < tmpGroup.get_size(true); i++)
                     {
                         try
                         {
                             //!! Beware index begin at 1 for group
                             DeviceProxy tmpDevicePoxy = tmpGroup.get_device(i+1);
                             if(tmpDevicePoxy != null)
                             {
                                 tmpDeviceName = tmpDevicePoxy.get_name();
                                 AttributeInfo tmpAttributeInfo = tmpDevicePoxy.get_attribute_info(tmpAttributeName);
                                 tmpAttributeInfo.label = m_sentProperty;
                                 tmpDevicePoxy.set_attribute_info(new AttributeInfo[] {tmpAttributeInfo});
                                 tmpAttributeInfo = null;
                                 tmpDevicePoxy = null;
                                 
                                 //Arrived here the command is SUCCESS
                                 m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Label property to " + String.valueOf(m_sentProperty) + " : SUCCESS");
                             }
                         }
                         catch(Exception exception)
                         {
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Set Label property to " + String.valueOf(m_sentProperty) + " : FAILED");
                         }
                     }
                 }
                 catch(Exception exception)
                 {
                     m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Unexpected Error Set Label property to " + String.valueOf(m_sentProperty) + " : " + exception.getMessage());
                 }
             }
         }
     }).start();
     get_logger().info("Exiting set_all_label()");
 }

//=========================================================
 /**
  * Execute command "ActivateAll" on device.
  * This command write 1 or true on all the attributes
  */
 //=========================================================
 public void activate_all()throws DevFailed
 {
     get_logger().info("Entering reset()");
     set_all_values(1);
     get_logger().info("Exiting reset()");
 }
//=========================================================
 /**
  * Execute command "DeactivateAll" on device.
  * This command write 0 or false on all the attributes
  */
 //=========================================================
 public void deactivage_all() throws DevFailed
 {
     get_logger().info("Entering reset()");
     set_all_values(0);
     get_logger().info("Exiting reset()");
 }
//=========================================================
 /*
  * This Thread read the quality of all attribute
  */
 public class QualityReader extends Thread
 {
     public void run()
     {
         for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
         {
             String tmpAttributeName = (String)enumeration.nextElement();
             Group tmpAttributeGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
             GroupAttrReplyList tmpResultGroup = null;
             try
             {
                 tmpResultGroup = tmpAttributeGroup.read_attribute(tmpAttributeName, true);
                 if(tmpResultGroup == null)
                 {
                     m_initializedQuality = false;
                     set_state(DevState.FAULT);
                     set_status(m_insertformat.format(new Date()) + " : Unexpected Error, cannot read " + tmpAttributeName + " relaunch the necessary attributes and make and Init Command");
                     return;
                 }
                 //Get the results of each attributes
                 Enumeration enumeration2 = tmpResultGroup.elements();
                 AttrQuality tmpAttributeQuality = AttrQuality.ATTR_INVALID;
                 String tmpDeviceName = "";
                 while(enumeration2.hasMoreElements()) 
                 {
                     GroupAttrReply tmpOneResult = (GroupAttrReply)enumeration2.nextElement();
                     try
                     {
                         tmpDeviceName = tmpOneResult.dev_name();
                         if(tmpOneResult.has_failed())
                         {
                             m_initializedQuality = false;
                             set_state(DevState.FAULT);
                             set_status(m_insertformat.format(new Date()) + " : Error see attributesResultReport and make an Init Command");
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Can get the Quality, relaunch it." );
                             m_attributeQualityTable.put(tmpDeviceName + "/" + tmpAttributeName, AttrQuality.ATTR_INVALID);
                         }
                         else
                         {
                             tmpAttributeQuality = tmpOneResult.get_data().getQuality();
                             m_attributeQualityTable.put(tmpDeviceName + "/" + tmpAttributeName,tmpAttributeQuality);
                         }
                     }
                     catch(Exception e)
                     {
                         m_initializedQuality = false;
                         set_state(DevState.FAULT);
                         set_status(m_insertformat.format(new Date()) + " : Unexpected Error see attributesResultReport and make an Init Command");
                         m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " :  Connexion error, relaunch it." );
                     }
                 }
                 tmpResultGroup.clear();
                 tmpResultGroup = null;
                 //Pb with asynchrone commmand Leak Memory
                 //System.gc();
             }
             catch(Exception e)
             {
                m_initializedQuality = false;
                set_state(DevState.FAULT);
                set_status(m_insertformat.format(new Date()) + " : Unexpected Error, cannot read " + tmpAttributeName + " relaunch the necessary attributes and make and Init Command");
             }
        }//end for
     }//end run method
 }
//=========================================================
 /*
  * This Thread compute a resum state for the device
  */
 public class StateUpdater extends Thread
 {
     public void run()
     {
         try
         {
             //Hastable used to delete the double entry of quality <Quality,Priority>
             Hashtable<AttrQuality, Integer> tmpResumQualityTable = new Hashtable<AttrQuality, Integer>();
             //Hastable used to delete the double entry of priority <Priority,Quality>
             Hashtable <Integer, AttrQuality> tmpResumPriorityTable = new Hashtable<Integer, AttrQuality>();
           
             Enumeration enumeration = m_attributeQualityTable.keys();
             while(enumeration.hasMoreElements())
             {
                String tmpAttributeName = (String)enumeration.nextElement();
                AttrQuality attrQualityTmp = AttrQuality.ATTR_INVALID;
                if(m_attributeQualityTable.containsKey(tmpAttributeName))
                    attrQualityTmp = (AttrQuality) m_attributeQualityTable.get(tmpAttributeName);
                
                int tmpIndex = get_index_for_attribute(tmpAttributeName);
                if(tmpIndex != -1)
                {
                    attr_attributesNumberPriorityList_read[tmpIndex] = ((Integer)m_priorityTable.get(attrQualityTmp)).shortValue();
                    attr_attributesQualityList_read[tmpIndex] = QualityUtilities.getNameForQuality(attrQualityTmp) + "-" + attributeNameList[tmpIndex];
                    // delete the double entry for a quality
                    if(!tmpResumQualityTable.containsKey(attrQualityTmp) && !tmpResumQualityTable.contains((Integer)m_priorityTable.get(attrQualityTmp)))
                        tmpResumQualityTable.put(attrQualityTmp, (Integer)m_priorityTable.get(attrQualityTmp));
                }
             }
             
             //If the device is in error dont compute the resum state
             if(!m_initializedQuality)
             {
                 //System.out.println("m_initialized=" + m_initialized);
                 tmpResumQualityTable.clear();
                 return;
             }
         
             //System.out.println("tmpResumQualityTable=" + tmpResumQualityTable.size());
             //Compute the state of device
             if(tmpResumQualityTable.size() == 0)
                 return;
             
             else if(tmpResumQualityTable.size() == 1)
             {
                 AttrQuality tmpAttributeQuality = (AttrQuality)tmpResumQualityTable.keys().nextElement();
                 set_state((DevState)m_qualityStateTable.get(tmpAttributeQuality));
                 set_status("All the attributes are in " + QualityUtilities.getNameForQuality(tmpAttributeQuality) + " quality.");
             }
             // Check the prority of qualities
             else
             {
                 AttrQuality tmpAttributeQuality;
                 Integer tmpPriority;
                 for(Enumeration enumeration2 = tmpResumQualityTable.keys(); enumeration2.hasMoreElements(); tmpResumPriorityTable.put(tmpPriority, tmpAttributeQuality))
                 {
                     tmpAttributeQuality = (AttrQuality)enumeration2.nextElement();
                     tmpPriority = (Integer)tmpResumQualityTable.get(tmpAttributeQuality);
                 }
                 //Sort the quality by priority 
                 Object objList[] = tmpResumQualityTable.values().toArray();
                 Arrays.sort(objList);
                 //get the greatest priority
                 tmpAttributeQuality = (AttrQuality)tmpResumPriorityTable.get(objList[objList.length - 1]);
                 DevState tmpDeviceState = (DevState)m_qualityStateTable.get(tmpAttributeQuality);
                 set_state(tmpDeviceState);
                 set_status("One of the attribute is in " + QualityUtilities.getNameForQuality(tmpAttributeQuality) + " quality.");
             }
             
             //Clear the table
             tmpResumQualityTable.clear();
             tmpResumPriorityTable.clear();
         }
         catch(Exception exception)
         {
             //exception.printStackTrace();
             m_initializedQuality = false;
             set_state(DevState.FAULT);
             set_status(m_insertformat.format(new Date()) + " : Unexpected Error, cannot compute a resum State for the device\n" + exception.getMessage());
             return;
         }
     }
 }
 //=========================================================
 /*
  * This Thread read the value of all attributes
  */
 public class ValueReader extends Thread
 {
     public void run()
     {
         String tmpAttributeName = "";
         try
         {
             for(Enumeration enumeration = m_attributeGroupTable.keys(); enumeration.hasMoreElements();)
             {
                 tmpAttributeName = (String)enumeration.nextElement();
                 Group tmpGroup = (Group)m_attributeGroupTable.get(tmpAttributeName);
                 GroupAttrReplyList tmpResultGroup = null;
                 tmpResultGroup = tmpGroup.read_attribute(tmpAttributeName, true);
                 
                 if(tmpResultGroup == null)
                 {
                     m_initializedValue = false;
                     set_state(DevState.FAULT);
                     set_status(m_insertformat.format(new Date()) + " : Unexpected Error, cannot read " + tmpAttributeName + " relaunch the necessary attributes and make and Init Command");
                     return;
                 }
                 
                 Enumeration enumeration2 = tmpResultGroup.elements();
                 DeviceAttribute tmpDeviceAttribute = null;
                 while(enumeration2.hasMoreElements()) 
                 {
                     GroupAttrReply tmpOneResult = (GroupAttrReply)enumeration2.nextElement();
                     String tmpDeviceName ="";
                     try
                     {
                         tmpDeviceName = tmpOneResult.dev_name();
                         if(tmpOneResult.has_failed())
                         {
                             m_initializedValue = false;
                             set_state(DevState.FAULT);
                             set_status(m_insertformat.format(new Date()) + " : Error see attributesResultReport and make an Init Command");
                             m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Can be read, relaunch it." );
                             m_attributeValueTable.put(tmpDeviceName + "/" + tmpAttributeName, Double.NaN);
                         }
                         tmpDeviceAttribute = tmpOneResult.get_data();
                         double tmpReadValue = Double.NaN;
                         switch(tmpDeviceAttribute.getType())
                         {
                             case Tango_DEV_SHORT:
                                 tmpReadValue = (new Short(tmpDeviceAttribute.extractShort())).doubleValue();
                                 break;
                                 
                             case Tango_DEV_USHORT: 
                                 //Bug in the API with extractUShort method must extract the Array
                                 tmpReadValue = (new Integer(tmpDeviceAttribute.extractUShortArray()[0])).doubleValue();
                                 break;
                             
                             
                             case Tango_DEV_UCHAR:
                                 //Bug in the API with extractUChar method must extract the Array
                                 tmpReadValue = (new Short(tmpDeviceAttribute.extractUCharArray()[0])).doubleValue();
                                 break;
                                 
                             case Tango_DEV_LONG:
                                 tmpReadValue = (new Integer(tmpDeviceAttribute.extractLong())).doubleValue();
                                 break;
                             
                             case Tango_DEV_FLOAT:
                                 tmpReadValue = (new Float(tmpDeviceAttribute.extractFloat())).doubleValue();
                                 break;
                             
                             case Tango_DEV_DOUBLE:
                                 tmpReadValue = tmpDeviceAttribute.extractDouble();
                                 break;
                                 
                             case Tango_DEV_BOOLEAN: 
                                 // Bug in the API with extractBoolean method must extract the Array
                                 if(tmpDeviceAttribute.extractBooleanArray()[0])
                                     tmpReadValue = 1;
                                 else
                                     tmpReadValue = 0;
                                 break;
        
                             case Tango_DEV_STATE: 
                                 tmpReadValue = (new Integer(tmpDeviceAttribute.extractState().value())).doubleValue();
                                 break;
                                 
                             case Tango_DEVVAR_SHORTARRAY:
                                 short array[] = tmpDeviceAttribute.extractShortArray();
                                 tmpReadValue = 0;
                                 for(int j = 0; j < array.length; j++)
                                     tmpReadValue += array[j];
                                 break;
        
                             case Tango_DEVVAR_USHORTARRAY:
                                 int array1[] = tmpDeviceAttribute.extractUShortArray();
                                 tmpReadValue = 0.0D;
                                 for(int j = 0; j < array1.length; j++)
                                     tmpReadValue += array1[j];
        
                                 break;
        
                             case Tango_DEVVAR_LONGARRAY:
                                 int array2[] = tmpDeviceAttribute.extractLongArray();
                                 tmpReadValue = 0.0D;
                                 for(int j = 0; j < array2.length; j++)
                                     tmpReadValue += array2[j];
        
                                 break;
        
                            
        
                             case Tango_DEVVAR_DOUBLEARRAY: 
                                 double array4[] = tmpDeviceAttribute.extractDoubleArray();
                                 tmpReadValue = 0.0D;
                                 for(int j = 0; j < array4.length; j++)
                                     tmpReadValue += array4[j];
        
                                 break;
                                 
                             default:
                                 tmpReadValue = Double.NaN;
                                 break;
                         }//End switch
                         m_attributeValueTable.put(tmpDeviceName + "/" + tmpAttributeName, new Double(tmpReadValue));
                     }
                     catch(Exception exception)
                     {
                         m_initializedValue = false;
                         set_state(DevState.FAULT);
                         set_status(m_insertformat.format(new Date()) + " : Unexpected Error, see attributesResultReport and make and Init Command");
                         m_attributeResultReportTable.put(tmpDeviceName + "/" + tmpAttributeName, m_insertformat.format(new Date()) + " : Read Error, relaunch it :" + exception.getMessage());
                     }
                 }
                 tmpResultGroup.clear();
                 tmpResultGroup = null;
                 //Pb with asynchronised command memory Leak
                 //System.gc();
             }//end for
         }//end try
         catch(Exception e)
         {
             m_initializedValue = false;
             set_state(DevState.FAULT);
             set_status(m_insertformat.format(new Date()) + " : Unexpected Error, cannot read " + tmpAttributeName + " relaunch the necessary attributes and make and Init Command : \n" + e.getMessage());
             return;
         }
     }
 }
//=========================================================
 /*
  * This Thread update all the spectrum attribute
  */
 public class ValueUpdater extends Thread
 {
     public void run()
     {
         //System.out.println("ValueUpdater"); 
         String tmpAttributeName = "";
         try
         {
             Enumeration enumeration = m_attributeValueTable.keys();
             //Apply the logical gates on attr_booleanSpectrum_read
             m_booleanLogicalVector.clear();
             while (enumeration.hasMoreElements())
             {
                tmpAttributeName = (String) enumeration.nextElement();
                double tmpReadValue = ((Double)m_attributeValueTable.get(tmpAttributeName)).doubleValue();
                short tmpBooleanShortValue = 0;
                Boolean tmpBooleanValue = Boolean.FALSE;
                int tmpIndex = get_index_for_attribute(tmpAttributeName);
                if(tmpReadValue == 1)
                {
                    tmpBooleanShortValue = 1;
                    tmpBooleanValue = Boolean.TRUE;
                }
                attr_spectrumResult_read[tmpIndex] = tmpReadValue;
                attr_booleanSpectrum_read[tmpIndex] = tmpBooleanShortValue;
                if(!m_booleanLogicalVector.contains(tmpBooleanValue))
                    m_booleanLogicalVector.add(tmpBooleanValue);
            }
         }
         catch(Exception e)
         {
             m_initializedValue = false;
             set_state(DevState.FAULT);
             set_status(m_insertformat.format(new Date()) + " : Unexpected Error, cannot read " + tmpAttributeName + " relaunch the necessary attributes and make and Init Command : \n" + e.getMessage());
             return;
         }
     }
 }
//=========================================================
 public static void main(String argv[])
 {
     System.out.println("ATTRIBUTECOMPOSER VERSION 2.1.0");
     
     try
	 {
	    //Unexport the server before
	    if(argv != null && argv.length > 0)
	    {
	        new Database().unexport_server("attributecomposer/" + argv[0]);
	    }
	 }
     catch(Exception e){}
     
     try
     {
         
         Util tg = Util.init(argv, "AttributeComposer");
         tg.server_init();
         System.out.println("Ready to accept request");
         tg.server_run();
     }
     catch(OutOfMemoryError ex)
     {
         System.err.println("Can't allocate memory !!!!");
         System.err.println("Exiting");
     }
     catch(UserException ex)
     {
         Except.print_exception(ex);
         System.err.println("Received a CORBA user exception");
         System.err.println("Exiting");
     }
     catch(SystemException ex)
     {
         Except.print_exception(ex);
         System.err.println("Received a CORBA system exception");
         System.err.println("Exiting");
     }
     System.exit(-1);
 }
 
}
